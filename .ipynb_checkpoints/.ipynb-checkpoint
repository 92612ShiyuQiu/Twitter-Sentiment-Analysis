{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import time\n",
    "\n",
    "X = np.genfromtxt('data/X.csv', delimiter=',')\n",
    "Y = np.genfromtxt('data/Y.csv', delimiter=',')\n",
    "\n",
    "X_comp, X_test, Y_comp, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0)\n",
    "Xtr, Xva, Ytr, Yva = train_test_split(X_comp, Y_comp, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = GradientBoostingClassifier(max_depth=3,loss=\"deviance\",learning_rate=0.1,n_estimators=1500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters4 = {\n",
    "    \"min_samples_split\": [2,6,10,20,40,60],\n",
    "    \"min_samples_leaf\": [1,3,5,7,9]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training start\n",
      "training finished, took 2397.2761957645416 seconds\n",
      "0.7331748904223022\n",
      "training error: 0.32070695232291035\n",
      "validation error: 0.3273954622163885\n",
      "best_estimator4:\t GradientBoostingClassifier(criterion='friedman_mse', init=None,\n",
      "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
      "                           max_features=None, max_leaf_nodes=None,\n",
      "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                           min_samples_leaf=9, min_samples_split=20,\n",
      "                           min_weight_fraction_leaf=0.0, n_estimators=1500,\n",
      "                           n_iter_no_change=None, presort='auto',\n",
      "                           random_state=None, subsample=1.0, tol=0.0001,\n",
      "                           validation_fraction=0.1, verbose=0,\n",
      "                           warm_start=False)\n",
      "best_score4:\t 0.667\n",
      "best_params4:\t {'min_samples_leaf': 9, 'min_samples_split': 20}\n",
      "best_index4:\t 27\n",
      "scorer4:\t <function _passthrough_scorer at 0x1a25984cb0>\n",
      "cv_results4:\t {'mean_fit_time': array([16.65857368, 16.44165125, 14.58802795, 15.21678629, 15.90320477,\n",
      "       14.75368633, 15.9023314 , 14.847995  , 16.8989325 , 15.82923155,\n",
      "       15.5439158 , 15.41696877, 16.47348118, 16.47622871, 15.96941342,\n",
      "       15.76566949, 14.91966295, 15.99751902, 16.41556726, 16.68708935,\n",
      "       14.55901442, 15.2972496 , 15.52358942, 15.48332257, 16.45698161,\n",
      "       17.04299917, 16.29434505, 16.87292566, 15.31560144, 15.14806709]), 'std_fit_time': array([1.08034946, 0.80869211, 0.52891415, 1.10637751, 1.89639565,\n",
      "       0.93336759, 0.34979216, 0.76156339, 0.39411251, 0.4666607 ,\n",
      "       0.51951729, 0.37165098, 0.56233045, 0.71592885, 1.21851599,\n",
      "       1.83706162, 1.52777312, 0.70089994, 0.18941894, 0.89119286,\n",
      "       0.32807405, 1.12825386, 0.0955627 , 0.54364549, 0.22723353,\n",
      "       0.63809274, 0.24993248, 0.9452643 , 0.11123749, 0.42927743]), 'mean_score_time': array([0.01294289, 0.0143014 , 0.01158404, 0.0135087 , 0.01202579,\n",
      "       0.01330686, 0.01272874, 0.0122694 , 0.01362128, 0.01249886,\n",
      "       0.01311769, 0.01370521, 0.0117382 , 0.01199012, 0.01174741,\n",
      "       0.01221819, 0.01312079, 0.01370096, 0.01379318, 0.01390648,\n",
      "       0.01106329, 0.01229339, 0.0128068 , 0.01339741, 0.01376042,\n",
      "       0.01415038, 0.01434159, 0.01355133, 0.01166596, 0.01239262]), 'std_score_time': array([0.00205611, 0.00264535, 0.00163335, 0.00201538, 0.00112288,\n",
      "       0.00248498, 0.00304327, 0.00134168, 0.00122018, 0.00091076,\n",
      "       0.00196119, 0.00284574, 0.00099299, 0.0007225 , 0.00131363,\n",
      "       0.00201702, 0.00051698, 0.00212224, 0.00065766, 0.00064556,\n",
      "       0.00028624, 0.00154051, 0.00119121, 0.00084502, 0.00193714,\n",
      "       0.00197949, 0.00154493, 0.00122555, 0.00029925, 0.00084049]), 'param_min_samples_leaf': masked_array(data=[1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5,\n",
      "                   7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'param_min_samples_split': masked_array(data=[2, 6, 10, 20, 40, 60, 2, 6, 10, 20, 40, 60, 2, 6, 10,\n",
      "                   20, 40, 60, 2, 6, 10, 20, 40, 60, 2, 6, 10, 20, 40, 60],\n",
      "             mask=[False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False, False, False,\n",
      "                   False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'min_samples_leaf': 1, 'min_samples_split': 2}, {'min_samples_leaf': 1, 'min_samples_split': 6}, {'min_samples_leaf': 1, 'min_samples_split': 10}, {'min_samples_leaf': 1, 'min_samples_split': 20}, {'min_samples_leaf': 1, 'min_samples_split': 40}, {'min_samples_leaf': 1, 'min_samples_split': 60}, {'min_samples_leaf': 3, 'min_samples_split': 2}, {'min_samples_leaf': 3, 'min_samples_split': 6}, {'min_samples_leaf': 3, 'min_samples_split': 10}, {'min_samples_leaf': 3, 'min_samples_split': 20}, {'min_samples_leaf': 3, 'min_samples_split': 40}, {'min_samples_leaf': 3, 'min_samples_split': 60}, {'min_samples_leaf': 5, 'min_samples_split': 2}, {'min_samples_leaf': 5, 'min_samples_split': 6}, {'min_samples_leaf': 5, 'min_samples_split': 10}, {'min_samples_leaf': 5, 'min_samples_split': 20}, {'min_samples_leaf': 5, 'min_samples_split': 40}, {'min_samples_leaf': 5, 'min_samples_split': 60}, {'min_samples_leaf': 7, 'min_samples_split': 2}, {'min_samples_leaf': 7, 'min_samples_split': 6}, {'min_samples_leaf': 7, 'min_samples_split': 10}, {'min_samples_leaf': 7, 'min_samples_split': 20}, {'min_samples_leaf': 7, 'min_samples_split': 40}, {'min_samples_leaf': 7, 'min_samples_split': 60}, {'min_samples_leaf': 9, 'min_samples_split': 2}, {'min_samples_leaf': 9, 'min_samples_split': 6}, {'min_samples_leaf': 9, 'min_samples_split': 10}, {'min_samples_leaf': 9, 'min_samples_split': 20}, {'min_samples_leaf': 9, 'min_samples_split': 40}, {'min_samples_leaf': 9, 'min_samples_split': 60}], 'split0_test_score': array([0.66033966, 0.65534466, 0.65434565, 0.65034965, 0.65634366,\n",
      "       0.65534466, 0.64635365, 0.65234765, 0.65734266, 0.65034965,\n",
      "       0.65234765, 0.66333666, 0.66033966, 0.66033966, 0.66033966,\n",
      "       0.66933067, 0.67132867, 0.65734266, 0.66233766, 0.66233766,\n",
      "       0.66233766, 0.66233766, 0.66133866, 0.66233766, 0.66733267,\n",
      "       0.66733267, 0.66733267, 0.67032967, 0.67532468, 0.67032967]), 'split1_test_score': array([0.673, 0.674, 0.671, 0.67 , 0.663, 0.659, 0.68 , 0.676, 0.678,\n",
      "       0.671, 0.674, 0.668, 0.679, 0.679, 0.679, 0.682, 0.675, 0.682,\n",
      "       0.674, 0.674, 0.674, 0.669, 0.676, 0.678, 0.671, 0.671, 0.671,\n",
      "       0.671, 0.669, 0.674]), 'split2_test_score': array([0.656, 0.654, 0.658, 0.654, 0.653, 0.653, 0.649, 0.654, 0.653,\n",
      "       0.661, 0.654, 0.654, 0.642, 0.64 , 0.64 , 0.637, 0.649, 0.648,\n",
      "       0.655, 0.655, 0.656, 0.651, 0.651, 0.654, 0.664, 0.664, 0.664,\n",
      "       0.664, 0.655, 0.658]), 'split3_test_score': array([0.657, 0.659, 0.654, 0.652, 0.654, 0.648, 0.641, 0.641, 0.634,\n",
      "       0.64 , 0.645, 0.636, 0.645, 0.648, 0.648, 0.646, 0.638, 0.642,\n",
      "       0.656, 0.656, 0.656, 0.655, 0.652, 0.657, 0.653, 0.653, 0.653,\n",
      "       0.653, 0.655, 0.657]), 'split4_test_score': array([0.66366366, 0.66666667, 0.67367367, 0.67767768, 0.66966967,\n",
      "       0.67567568, 0.66566567, 0.66566567, 0.66766767, 0.67367367,\n",
      "       0.67167167, 0.66466466, 0.66866867, 0.67167167, 0.65565566,\n",
      "       0.66166166, 0.66266266, 0.66566567, 0.65865866, 0.65865866,\n",
      "       0.65865866, 0.66366366, 0.65465465, 0.66466466, 0.67667668,\n",
      "       0.67667668, 0.67667668, 0.67667668, 0.67667668, 0.67467467]), 'mean_test_score': array([0.662 , 0.6618, 0.6622, 0.6608, 0.6592, 0.6582, 0.6564, 0.6578,\n",
      "       0.658 , 0.6592, 0.6594, 0.6572, 0.659 , 0.6598, 0.6566, 0.6592,\n",
      "       0.6592, 0.659 , 0.6612, 0.6612, 0.6614, 0.6602, 0.659 , 0.6632,\n",
      "       0.6664, 0.6664, 0.6664, 0.667 , 0.6662, 0.6668]), 'std_test_score': array([0.00612412, 0.00752189, 0.0084331 , 0.01097461, 0.00628635,\n",
      "       0.00943372, 0.0143922 , 0.0119957 , 0.01479732, 0.01263966,\n",
      "       0.01140095, 0.01157309, 0.01400133, 0.01442919, 0.01316184,\n",
      "       0.01609787, 0.01387335, 0.01404376, 0.00688575, 0.00688575,\n",
      "       0.00671517, 0.00641372, 0.00923405, 0.00830671, 0.00791019,\n",
      "       0.00791019, 0.00791019, 0.00807022, 0.00950488, 0.0077426 ]), 'rank_test_score': array([ 9, 10,  8, 14, 18, 25, 30, 27, 26, 18, 17, 28, 22, 16, 29, 18, 18,\n",
      "       22, 12, 12, 11, 15, 22,  7,  3,  3,  3,  1,  6,  2], dtype=int32)}\n",
      "refit_time4:\t 21.592427015304565\n"
     ]
    }
   ],
   "source": [
    "GBC4 = GridSearchCV(clf, parameters4, cv=5)\n",
    "\n",
    "print('training start')\n",
    "starting_time = time.time()\n",
    "GBC4.fit(Xtr[:5000], Ytr[:5000])\n",
    "end_time = time.time()\n",
    "print(\"training finished, took {} seconds\".format(end_time - starting_time))\n",
    "\n",
    "gradient_boosting_classifier_roc = roc_auc_score(\n",
    "   Yva, GBC4.predict_proba(Xva)[:,1])\n",
    "print(gradient_boosting_classifier_roc)\n",
    "\n",
    "print(\"training error:\", 1 - GBC4.score(Xtr, Ytr))\n",
    "print(\"validation error:\", 1 - GBC4.score(Xva, Yva))\n",
    "\n",
    "best_estimator4 = GBC4.best_estimator_\n",
    "best_score4 = GBC4.best_score_\n",
    "best_params4 = GBC4.best_params_\n",
    "best_index4 = GBC4.best_index_\n",
    "scorer4 = GBC4.scorer_\n",
    "cv_results4 = GBC4.cv_results_\n",
    "refit_time4 = GBC4.refit_time_\n",
    "\n",
    "print('best_estimator4:\\t', best_estimator4)\n",
    "print('best_score4:\\t', best_score4)\n",
    "print('best_params4:\\t', best_params4)\n",
    "print('best_index4:\\t', best_index4)\n",
    "print('scorer4:\\t', scorer4)\n",
    "print('cv_results4:\\t', cv_results4)\n",
    "print('refit_time4:\\t', refit_time4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training start\n",
      "training finished, took 21.78093695640564 seconds\n",
      "0.7400846687468055\n",
      "training error: 0.31872236025815326\n",
      "validation error: 0.3239577473592099\n",
      "best_estimator5:\t GradientBoostingClassifier(criterion='friedman_mse', init=None,\n",
      "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
      "                           max_features='sqrt', max_leaf_nodes=None,\n",
      "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                           min_samples_leaf=9, min_samples_split=20,\n",
      "                           min_weight_fraction_leaf=0.0, n_estimators=1500,\n",
      "                           n_iter_no_change=None, presort='auto',\n",
      "                           random_state=None, subsample=1.0, tol=0.0001,\n",
      "                           validation_fraction=0.1, verbose=0,\n",
      "                           warm_start=False)\n",
      "best_score5:\t 0.6674\n",
      "best_params5:\t {'max_features': 'sqrt'}\n",
      "best_index5:\t 1\n",
      "scorer5:\t <function _passthrough_scorer at 0x1a25984cb0>\n",
      "cv_results5:\t {'mean_fit_time': array([1.57114205, 2.22363815]), 'std_fit_time': array([0.13955624, 0.29417355]), 'mean_score_time': array([0.0134007, 0.0133162]), 'std_score_time': array([0.00230809, 0.00217392]), 'param_max_features': masked_array(data=['log2', 'sqrt'],\n",
      "             mask=[False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'max_features': 'log2'}, {'max_features': 'sqrt'}], 'split0_test_score': array([0.66233766, 0.66933067]), 'split1_test_score': array([0.675, 0.674]), 'split2_test_score': array([0.664, 0.661]), 'split3_test_score': array([0.656, 0.654]), 'split4_test_score': array([0.67267267, 0.67867868]), 'mean_test_score': array([0.666 , 0.6674]), 'std_test_score': array([0.00697002, 0.00888699]), 'rank_test_score': array([2, 1], dtype=int32)}\n",
      "refit_time5:\t 2.6493911743164062\n"
     ]
    }
   ],
   "source": [
    "clf5 = GradientBoostingClassifier(max_depth=3,loss=\"deviance\",learning_rate=0.1,\n",
    "                                 n_estimators=1500,min_samples_split=20,min_samples_leaf=9)\n",
    "\n",
    "parameters5 = {\"max_features\":[\"log2\",\"sqrt\"]}\n",
    "\n",
    "GBC5 = GridSearchCV(clf5, parameters5, cv=5)\n",
    "\n",
    "print('training start')\n",
    "starting_time = time.time()\n",
    "GBC5.fit(Xtr[:5000], Ytr[:5000])\n",
    "end_time = time.time()\n",
    "print(\"training finished, took {} seconds\".format(end_time - starting_time))\n",
    "\n",
    "gradient_boosting_classifier_roc = roc_auc_score(\n",
    "   Yva, GBC5.predict_proba(Xva)[:,1])\n",
    "print(gradient_boosting_classifier_roc)\n",
    "\n",
    "print(\"training error:\", 1 - GBC5.score(Xtr, Ytr))\n",
    "print(\"validation error:\", 1 - GBC5.score(Xva, Yva))\n",
    "\n",
    "best_estimator5 = GBC5.best_estimator_\n",
    "best_score5 = GBC5.best_score_\n",
    "best_params5 = GBC5.best_params_\n",
    "best_index5 = GBC5.best_index_\n",
    "scorer5 = GBC5.scorer_\n",
    "cv_results5 = GBC5.cv_results_\n",
    "refit_time5 = GBC5.refit_time_\n",
    "\n",
    "print('best_estimator5:\\t', best_estimator5)\n",
    "print('best_score5:\\t', best_score5)\n",
    "print('best_params5:\\t', best_params5)\n",
    "print('best_index5:\\t', best_index5)\n",
    "print('scorer5:\\t', scorer5)\n",
    "print('cv_results5:\\t', cv_results5)\n",
    "print('refit_time5:\\t', refit_time5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training start\n",
      "training finished, took 101.92091298103333 seconds\n",
      "0.7398251790704341\n",
      "training error: 0.31955057584423296\n",
      "validation error: 0.3241452590786924\n",
      "best_estimator6:\t GradientBoostingClassifier(criterion='friedman_mse', init=None,\n",
      "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
      "                           max_features='sqrt', max_leaf_nodes=None,\n",
      "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                           min_samples_leaf=9, min_samples_split=20,\n",
      "                           min_weight_fraction_leaf=0.0, n_estimators=1500,\n",
      "                           n_iter_no_change=None, presort='auto',\n",
      "                           random_state=None, subsample=0.5, tol=0.0001,\n",
      "                           validation_fraction=0.1, verbose=0,\n",
      "                           warm_start=False)\n",
      "best_score6:\t 0.6686\n",
      "best_params6:\t {'subsample': 0.5}\n",
      "best_index6:\t 0\n",
      "scorer6:\t <function _passthrough_scorer at 0x1a25984cb0>\n",
      "cv_results6:\t {'mean_fit_time': array([3.25969105, 3.20033164, 2.96971374, 2.75557404, 2.51482463,\n",
      "       2.56479936, 2.30795636]), 'std_fit_time': array([0.29650108, 0.19095334, 0.41676404, 0.19210079, 0.1812114 ,\n",
      "       0.26931924, 0.22763753]), 'mean_score_time': array([0.01527061, 0.01381807, 0.01249375, 0.01327662, 0.01189599,\n",
      "       0.01472945, 0.01295643]), 'std_score_time': array([0.00342379, 0.00100098, 0.0004685 , 0.00190127, 0.00105084,\n",
      "       0.00196854, 0.00217585]), 'param_subsample': masked_array(data=[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0],\n",
      "             mask=[False, False, False, False, False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object), 'params': [{'subsample': 0.5}, {'subsample': 0.618}, {'subsample': 0.8}, {'subsample': 0.85}, {'subsample': 0.9}, {'subsample': 0.95}, {'subsample': 1.0}], 'split0_test_score': array([0.66733267, 0.66333666, 0.65934066, 0.66133866, 0.66133866,\n",
      "       0.66633367, 0.66833167]), 'split1_test_score': array([0.688, 0.675, 0.669, 0.674, 0.674, 0.677, 0.667]), 'split2_test_score': array([0.659, 0.66 , 0.659, 0.658, 0.665, 0.664, 0.661]), 'split3_test_score': array([0.663, 0.647, 0.649, 0.656, 0.662, 0.661, 0.663]), 'split4_test_score': array([0.66566567, 0.66866867, 0.66066066, 0.67467467, 0.66966967,\n",
      "       0.66766767, 0.67467467]), 'mean_test_score': array([0.6686, 0.6628, 0.6594, 0.6648, 0.6664, 0.6672, 0.6668]), 'std_test_score': array([0.01010039, 0.00939165, 0.00635722, 0.00797151, 0.00480422,\n",
      "       0.00539796, 0.00474166]), 'rank_test_score': array([1, 6, 7, 5, 4, 2, 3], dtype=int32)}\n",
      "refit_time6:\t 3.50957989692688\n"
     ]
    }
   ],
   "source": [
    "clf6 = GradientBoostingClassifier(max_depth=3,loss=\"deviance\",learning_rate=0.1,\n",
    "                                 n_estimators=1500,min_samples_split=20,min_samples_leaf=9,\n",
    "                                 max_features=\"sqrt\")\n",
    "\n",
    "parameters6 = {\"subsample\":[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0]}\n",
    "\n",
    "GBC6 = GridSearchCV(clf6, parameters6, cv=5)\n",
    "\n",
    "print('training start')\n",
    "starting_time = time.time()\n",
    "GBC6.fit(Xtr[:5000], Ytr[:5000])\n",
    "end_time = time.time()\n",
    "print(\"training finished, took {} seconds\".format(end_time - starting_time))\n",
    "\n",
    "gradient_boosting_classifier_roc = roc_auc_score(\n",
    "   Yva, GBC6.predict_proba(Xva)[:,1])\n",
    "print(gradient_boosting_classifier_roc)\n",
    "\n",
    "print(\"training error:\", 1 - GBC6.score(Xtr, Ytr))\n",
    "print(\"validation error:\", 1 - GBC6.score(Xva, Yva))\n",
    "\n",
    "best_estimator6 = GBC6.best_estimator_\n",
    "best_score6 = GBC6.best_score_\n",
    "best_params6 = GBC6.best_params_\n",
    "best_index6 = GBC6.best_index_\n",
    "scorer6 = GBC6.scorer_\n",
    "cv_results6 = GBC6.cv_results_\n",
    "refit_time6 = GBC6.refit_time_\n",
    "\n",
    "print('best_estimator6:\\t', best_estimator6)\n",
    "print('best_score6:\\t', best_score6)\n",
    "print('best_params6:\\t', best_params6)\n",
    "print('best_index6:\\t', best_index6)\n",
    "print('scorer6:\\t', scorer6)\n",
    "print('cv_results6:\\t', cv_results6)\n",
    "print('refit_time6:\\t', refit_time6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Gradient Boosting Classifier Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training start\n",
      "training finished, took 65.03798818588257 seconds\n",
      "0.762073508118382\n",
      "training error: 0.2967512071632835\n",
      "validation error: 0.30933183323957747\n"
     ]
    }
   ],
   "source": [
    "clf = GradientBoostingClassifier(max_depth=3,loss=\"deviance\",learning_rate=0.1,\n",
    "                                 n_estimators=1500,min_samples_split=20,min_samples_leaf=9,\n",
    "                                 max_features=\"sqrt\", subsample=0.5)\n",
    "\n",
    "print('training start')\n",
    "starting_time = time.time()\n",
    "clf.fit(Xtr, Ytr)\n",
    "end_time = time.time()\n",
    "print(\"training finished, took {} seconds\".format(end_time - starting_time))\n",
    "\n",
    "gradient_boosting_classifier_roc = roc_auc_score(\n",
    "   Yva, clf.predict_proba(Xva)[:,1])\n",
    "print(gradient_boosting_classifier_roc)\n",
    "\n",
    "print(\"training error:\", 1 - clf.score(Xtr, Ytr))\n",
    "print(\"validation error:\", 1 - clf.score(Xva, Yva))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7604220264781583\n"
     ]
    }
   ],
   "source": [
    "gradient_boosting_classifier_roc = roc_auc_score(\n",
    "   Y_test, clf.predict_proba(X_test)[:,1])\n",
    "print(gradient_boosting_classifier_roc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
